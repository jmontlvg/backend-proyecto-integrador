package org.generation.ecommerce;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;// Permite imprimir
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;// Permite conocer el estado

import org.generation.ecommerce.model.Producto;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.hamcrest.Matchers.containsString;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.MediaType;

@SpringBootTest
@AutoConfigureMockMvc // Ayuda a autoconfigurar el entorno
class EcommerceApplicationTests {
	
	@Autowired
	private MockMvc mockMvc; // Con el mockMvc voy a poder crear las solicitudes
	private final String token = "Bearer: ";

	@Test
	@DisplayName("Se prueba el endpoint http://localhost:8080/api/productos/2")
	void pruebaGET() throws Exception {
		this.mockMvc.perform(get("/api/productos/2"))
			.andDo(print())
			.andExpect(status().isOk())
			.andExpect(content().string(containsString("borradorAzor.jpg"))				
				);
	}// pruebaGET
	
	
	@Test
	@Disabled("Probado la primera vez, deshabilitado para subsecuentes ocasiones")// Esto evita que se vuelva a ejecutar
	@DisplayName("Se prueba borrar el producto con el id 8 en el endpoint http://localhost:8080/api/productos/8")
	void pruebaDELETE() throws Exception {
		this.mockMvc.perform(delete("/api/productos/8").header("Authorization", token))
			.andDo(print())
			.andExpect(status().isOk())
			.andExpect(content().string(containsString("Punta de cincel de 6mm"))				
				);
	}// pruebaDELETE
	
	
	@Test
	@DisplayName("Se prueba actualizar el producto con el id 5 en el endpoint http://localhost:8080/api/productos/5")
	void pruebaPUT() throws Exception {
		this.mockMvc.perform(put("/api/productos/5?precio=59.99")
				.header("Authorization", token))
			.andDo(print())
			.andExpect(status().isOk())
			.andExpect(content().string(containsString("59.99"))				
				);
	}// pruebaPUT
	
	
	@Test
	@DisplayName("Se prueba crear un producto en el endpoint http://localhost:8080/api/productos/")
	void pruebaPOST() throws Exception {
		Producto p = new Producto("Pluma y Lapicero Zebra", 
				"Pluma y Lapicero Zebra ZGrip Silver Azul",
				"pluma.jpg",
				79.99);
		p.setCategoriaid(1L);
		this.mockMvc.perform(post("/api/productos/")
				.contentType(MediaType.APPLICATION_JSON)
				.content(asJsonString(p))
				.header("Authorization", token))
			.andDo(print())
			.andExpect(status().isOk())
			.andExpect(content().string(containsString("Pluma y Lapicero Zebra ZGrip Silver Azul"))				
				);
	}// pruebaPOST

	
	
	private static String asJsonString(final Object obj) {
		
		try {
		return new ObjectMapper().writeValueAsString(obj);
		} catch (JsonProcessingException e) {
			throw new RuntimeException(e);
		}
	}// asJsonString

}// class EcommerceAplicationTests
